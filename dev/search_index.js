var documenterSearchIndex = {"docs":
[{"location":"normal/#Normal","page":"Normal distributions","title":"Normal","text":"","category":"section"},{"location":"normal/","page":"Normal distributions","title":"Normal distributions","text":"The normal distribution is denoted by","category":"page"},{"location":"normal/","page":"Normal distributions","title":"Normal distributions","text":"pi(x) = mathcalN(x  mu   Sigma )","category":"page"},{"location":"normal/","page":"Normal distributions","title":"Normal distributions","text":"The exact expression for the probabiltiy density function depends on whether x is vector with real or complex values, both are supported.","category":"page"},{"location":"normal/","page":"Normal distributions","title":"Normal distributions","text":"Types:","category":"page"},{"location":"normal/","page":"Normal distributions","title":"Normal distributions","text":"abstract type AbstractNormal{T<:Number}  <: AbstractDistribution end # normal distributions with realisations in real / complex Euclidean spaces\nNormal{T} <: AbstractNormal{T} # mean vector / covariance matrix parametrisation of normal distributions\nDirac{T}  <: AbstractNormal{T} # normal distribution with zero covariance","category":"page"},{"location":"normal/","page":"Normal distributions","title":"Normal distributions","text":"Functionality:","category":"page"},{"location":"normal/","page":"Normal distributions","title":"Normal distributions","text":"dim(N::AbstractNormal)  # dimension  of the normal distribution\n\nmean(N::AbstractNormal) # mean vector\ncov(N::AbstractNormal)  # covariance matrix\nvar(N::AbstractNormal)  # vector of marginal variances\nstd(N::AbstractNormal)  # vector of marginal standard deviations\n\nresidual(N::AbstractNormal,x) # whitened residual of realisation x\nlogpdf(N::AbstractNormal,x)   # logarithm of the probability density function at x\nentropy(N::AbstractNormal)\nkldivergence(N1::AbstractNormal,N2::AbstractNormal)\nrand(N::AbstractNormal)","category":"page"},{"location":"tutorial_kalman_filter/#Implementing-a-Kalman-filter","page":"Implementing a Kalman filter","title":"Implementing a Kalman filter","text":"","category":"section"},{"location":"tutorial_kalman_filter/","page":"Implementing a Kalman filter","title":"Implementing a Kalman filter","text":"This tutorial describes how to implement a Kalman filter for the following state-space model","category":"page"},{"location":"tutorial_kalman_filter/","page":"Implementing a Kalman filter","title":"Implementing a Kalman filter","text":"beginaligned\nx_0 sim mathcalN(mu_0 Sigma_0) \nx_n mid x_n-1 sim mathcalN(Phi  x_n-1 Q)\nz_n mid x_n sim mathcalN(Cx_nR)\nendaligned","category":"page"},{"location":"tutorial_kalman_filter/","page":"Implementing a Kalman filter","title":"Implementing a Kalman filter","text":"given a measurement sequence z_0N.","category":"page"},{"location":"tutorial_kalman_filter/#Kalman-filter-implementation","page":"Implementing a Kalman filter","title":"Kalman filter implementation","text":"","category":"section"},{"location":"tutorial_kalman_filter/","page":"Implementing a Kalman filter","title":"Implementing a Kalman filter","text":"\nfunction kalman_filter(\n    ys::AbstractVecOrMat,\n    init::AbstractNormal,\n    fw_kernel::AbstractNormalKernel,\n    m_kernel::AbstractNormalKernel\n\n)\n\n\n\nend","category":"page"},{"location":"tutorial_pomp_sampling/#Sampling-from-Markov-realisable-processes","page":"Sampling from Probabilistic state-space models","title":"Sampling from Markov-realisable processes","text":"","category":"section"},{"location":"tutorial_pomp_sampling/","page":"Sampling from Probabilistic state-space models","title":"Sampling from Probabilistic state-space models","text":"This tutorial describes how to sample from the probabilistic state-space model given by","category":"page"},{"location":"tutorial_pomp_sampling/","page":"Sampling from Probabilistic state-space models","title":"Sampling from Probabilistic state-space models","text":"beginaligned\nx_0 sim mathcalN(mu_0 Sigma_0) \nx_n mid x_n-1 sim mathcalN(Phi  x_n-1 Q)\ny_n = C x_n\nendaligned","category":"page"},{"location":"tutorial_pomp_sampling/","page":"Sampling from Probabilistic state-space models","title":"Sampling from Probabilistic state-space models","text":"where x and y are referred to as the latent Gauss-Markov process and the output process, respectively. Additionally, noisy measurements of the output process will be generated according to","category":"page"},{"location":"tutorial_pomp_sampling/","page":"Sampling from Probabilistic state-space models","title":"Sampling from Probabilistic state-space models","text":"z_n mid x_n sim mathcalN(Cx_nR)","category":"page"},{"location":"tutorial_pomp_sampling/#Sampling-from-the-latent-Gauss-Markov-process","page":"Sampling from Probabilistic state-space models","title":"Sampling from the latent Gauss-Markov process","text":"","category":"section"},{"location":"tutorial_pomp_sampling/","page":"Sampling from Probabilistic state-space models","title":"Sampling from Probabilistic state-space models","text":"using MarkovKernels, LinearAlgebra, Plots\n\n\nN = 2^9\nns = 0:N\n\n# define a Markov kernel for a homogeneous Markov proces\nλ = 0.9\nσ = 1.0\ndimx = 2\n\nΦ = [λ 0.0; 1 - λ^2 λ]\nQ = (1-λ^2)*(1+λ^2) * 1.0*I(dimx)\n\nforward_kernel = NormalKernel(Φ, Q)\n\n# define initial distribution\ninit = Normal(zeros(dimx), 1.0*I(dimx))\n\n# sample Gauss-Markov process and plot\nxs = rand(init, forward_kernel, N)\nplt_states = plot(\n    ns,\n    xs,\n    layout=(dimx,1),\n    xlabel = [\"\" \"t\"],\n    label = [\"x0\" \"x1\"],\n    title = [\"Latent Gauss-Markov process\" \"\"]\n)","category":"page"},{"location":"tutorial_pomp_sampling/#Sampling-output-and-measurements","page":"Sampling from Probabilistic state-space models","title":"Sampling output and measurements","text":"","category":"section"},{"location":"tutorial_pomp_sampling/","page":"Sampling from Probabilistic state-space models","title":"Sampling from Probabilistic state-space models","text":"# define output process\nC = σ*[1.0 -1.0]\noutput_kernel = DiracKernel(C)\n\n# define measurements of output process\nR = fill(0.1,1,1)\nmeasurement_kernel = NormalKernel(C,R)\n\n# sample outputs, measurements and plot\noutput = rand(output_kernel,xs)\nzs = rand(measurement_kernel,xs)\n\nplt_output = plot(\n    ns,\n    output,\n    xlabel = \"t\",\n    ylabel = \"y\",\n    label = \"output process\",\n    title = \"Output process and measurements\"\n)\n\nscatter!(\n    ns,\n    zs,\n    label = \"measurements\",\n    color=\"black\"\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MarkovKernels","category":"page"},{"location":"#MarkovKernels","page":"Home","title":"MarkovKernels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MarkovKernels.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [MarkovKernels]","category":"page"},{"location":"#MarkovKernels.dim-Tuple{Normal}","page":"Home","title":"MarkovKernels.dim","text":"dim(N::AbstractNormal)\n\nReturns the dimension of the random vector represented by the normal distribution N.\n\n\n\n\n\n","category":"method"}]
}
